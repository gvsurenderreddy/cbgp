return ["bgp virtual peer", "cbgp_valid_bgp_virtual_peer"];

# -----[ cbgp_valid_bgp_virtual_peer ]-------------------------------
# Test ability to define virtual peers, i.e. BGP neighbors that do not
# really exist. These virtual peers are usually defined for the
# purpose of injecting routes into the model or to collect routes
# generated by the model.
#
# Setup:
#   - R1 (1.0.0.1, AS1)
#   - R2 (1.0.0.2, AS1)
#   - R3 (2.0.0.1, AS2), virtual
#
# Topology:
#
#   R2 ----- R1 ----- (R3)
#
# Scenario:
#   * Create a virtual peer R3 in R1
#   * Check that the session can be "established"
# -------------------------------------------------------------------
sub cbgp_valid_bgp_virtual_peer($) {
  my ($cbgp)= @_;
  my $topo= topo_2nodes();
  cbgp_topo($cbgp, $topo, 1);
  cbgp_topo_igp_compute($cbgp, $topo, 1);
  cbgp_topo_bgp_routers($cbgp, $topo, 1);
  $cbgp->send_cmd("bgp domain 1 full-mesh");
  $cbgp->send_cmd("net add node 2.0.0.1");
  $cbgp->send_cmd("net add link 1.0.0.1 2.0.0.1");
  $cbgp->send_cmd("net node 1.0.0.1 route add --oif=2.0.0.1 2.0.0.1/32 0");
  cbgp_peering($cbgp, "1.0.0.1", "2.0.0.1", 2, "next-hop-self", "virtual");
  $cbgp->send_cmd("sim run");
  return TEST_FAILURE
    if (!cbgp_check_peer($cbgp, "1.0.0.1", "2.0.0.1",
			 -state=>C_PEER_ESTABLISHED));
  return TEST_SUCCESS;
}

